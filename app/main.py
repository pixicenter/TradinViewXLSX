from fastapi import FastAPI, UploadFile, Form, BackgroundTasks, File
from fastapi.responses import FileResponse, JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from typing import List
from pathlib import Path
import shutil
import os
import zipfile
import subprocess

app = FastAPI()

# ServeÈ™te fiÈ™ierele HTML
app.mount("/static", StaticFiles(directory="static"), name="static")


selected_file_type = None

UPLOAD_FOLDER = Path("csv")
OUTPUT_FOLDER = Path("output")
TEMPLATE_FOLDER = Path("template")
LOG_FILE = Path("process_log.txt")

UPLOAD_FOLDER.mkdir(parents=True, exist_ok=True)
OUTPUT_FOLDER.mkdir(parents=True, exist_ok=True)
TEMPLATE_FOLDER.mkdir(parents=True, exist_ok=True)

@app.get("/", response_class=HTMLResponse)
def serve_index():
    return FileResponse("static/index.html")
# def home():
#     index_path = Path(__file__).parent / "templates" / "index.html"
#     if index_path.exists():
#         return index_path.read_text()
#     return "<h1>Eroare: FiÈ™ierul index.html lipseÈ™te.</h1>"
@app.get("/main")
def serve_main():
    return FileResponse("static/main.html")

@app.get("/instructions")
def serve_instructions():
    return FileResponse("static/instructions.html")

@app.get("/sidebar")
def serve_main():
    return FileResponse("static/sidebar.html")

@app.post("/upload/")
def upload_csv(files: List[UploadFile] = File(...),
    file_type: str = Form(...)
):
    """
    SalveazÄƒ fiÈ™ierele CSV Ã®n folderul dedicat.
    - DacÄƒ fiÈ™ierul existÄƒ deja, Ã®l rescrie È™i va fi raportat ca 'overwritten'.
    - DacÄƒ fiÈ™ierul NU existÄƒ, va fi raportat ca 'newly_created'.
    """
    global selected_file_type
    selected_file_type = file_type  # stocÄƒm tipul Ã®ntr-o variabilÄƒ globalÄƒ exemplificativ
    
    # ðŸ”¹ È˜tergem toate fiÈ™ierele din folderul `csv/`
    for existing_file in UPLOAD_FOLDER.iterdir():  # VerificÄƒ toate fiÈ™ierele È™i subfolderele
        if existing_file.is_file():  # AsigurÄƒ cÄƒ È™tergem doar fiÈ™iere, nu subfoldere
            existing_file.unlink()  # È˜terge fiÈ™ierul
    # ðŸ”¹ È˜tergem toate fiÈ™ierele din folderul `csv/`
    for existing_file in OUTPUT_FOLDER.iterdir():  # VerificÄƒ toate fiÈ™ierele È™i subfolderele
        if existing_file.is_file():  # AsigurÄƒ cÄƒ È™tergem doar fiÈ™iere, nu subfoldere
            existing_file.unlink()  # È˜terge fiÈ™ierul

    new_files = []
    
    for file in files:
        file_path = UPLOAD_FOLDER / file.filename
        new_files.append(file.filename)
        
        # Copiem conÈ›inutul, suprascriind dacÄƒ fiÈ™ierul existÄƒ
        with file_path.open("wb") as f:
            shutil.copyfileobj(file.file, f)
    

    # ConstruieÈ™te HTML pentru fiÈ™ierele noi
    if new_files:
        new_files_html = "<ul>" + "".join(f"<li>{f}</li>" for f in new_files) + "</ul>"
    else:
        new_files_html = "<p><em>Niciun fiÈ™ier nou.</em></p>"

    html_response = f"""
    
    <p><strong>FiÈ™iere Ã®ncÄƒrcate cu succes:</strong></p>
    {new_files_html}
    <p><strong>Tip FiÈ™ier CSV:</strong> {file_type}</p>
    
    """
    return HTMLResponse(content=html_response)


# @app.post("/process/")
# def process_files():
#     """ExecutÄƒ scriptul de procesare CSV -> XLSX."""
#     try:
#         LOG_FILE.unlink(missing_ok=True)  # È˜terge log-ul anterior
#         subprocess.run(["python", "app/process_script.py"], check=True)  # RuleazÄƒ scriptul de procesare
#         return JSONResponse(content={"message": "Procesare finalizatÄƒ!"})
#     except subprocess.CalledProcessError as e:
#         return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/process/")
def process_files():
    """
    Aici apelÄƒm scriptul specific Ã®n funcÈ›ie de tipul selectat (PPI, CPI etc.)
    """
    if not selected_file_type:
        return JSONResponse(content={"error": "Nu a fost selectat niciun tip anterior."}, status_code=400)
    
    try:
        if selected_file_type == "PPI":
            # RulÄƒm process_script.py adica Full PC Procent
            subprocess.run(["python", "app/process_script.py"], check=True)
            msg = "Procesare PPI finalizatÄƒ!"
        elif selected_file_type == "GDPQOQYOY":
            # RulÄƒm gppqoqyoy.py (cÃ¢nd Ã®l vei crea)
            subprocess.run(["python", "app/gppqoqyoy.py"], check=True)
            msg = "Procesare GDPQOQYOY finalizatÄƒ!"
        elif selected_file_type == "PMIPCNOMINAL":
            # RulÄƒm pmipcnominal.py (cÃ¢nd Ã®l vei crea)
            subprocess.run(["python", "app/pmipcnominal.py"], check=True)
            msg = "Procesare PMI PC Valoare Nominala finalizatÄƒ!"
        else:
            # RulÄƒm momyoy.py (exemplu)
            subprocess.run(["python", "app/momyoy.py"], check=True)
            msg = "Procesare MOM YOY finalizatÄƒ!"
        
        # ReturnÄƒm mesajul HTML cÄƒtre interfaÈ›Äƒ
        return HTMLResponse(content=msg)
    except subprocess.CalledProcessError as e:
        return HTMLResponse(content=f"<p><strong>ERROR:</strong> {str(e)}</p>", status_code=500)


@app.get("/download/{filename}")
def download_file(filename: str, background_tasks: BackgroundTasks):
    """Permite descÄƒrcarea unui fiÈ™ier XLSX generat È™i Ã®l È™terge dupÄƒ descÄƒrcare Ã®mpreunÄƒ cu CSV-urile sursÄƒ."""
    file_path = OUTPUT_FOLDER / filename
    if file_path.exists():
        response = FileResponse(file_path, filename=filename)
        response.headers["Content-Disposition"] = f"attachment; filename={filename}"
        
        # # È˜terge fiÈ™ierul È™i CSV-urile dupÄƒ descÄƒrcare
        # def cleanup():
        #     file_path.unlink(missing_ok=True)
        #     for csv_file in UPLOAD_FOLDER.glob("*.csv"):
        #         csv_file.unlink(missing_ok=True)
        
        # background_tasks.add_task(cleanup)  # RuleazÄƒ cleanup Ã®n fundal
        return response

    return JSONResponse(content={"error": "FiÈ™ierul nu existÄƒ."}, status_code=404)

@app.get("/download_all/")
def download_all(background_tasks: BackgroundTasks):
    """ArhiveazÄƒ È™i permite descÄƒrcarea tuturor fiÈ™ierelor XLSX, apoi È™terge fiÈ™ierele generatate È™i CSV-urile."""
    archive_path = OUTPUT_FOLDER / "output.zip"
    with zipfile.ZipFile(archive_path, "w") as zipf:
        for file in OUTPUT_FOLDER.glob("*.xlsx"):
            zipf.write(file, file.name)

    response = FileResponse(archive_path, filename="output.zip")
    response.headers["Content-Disposition"] = "attachment; filename=output.zip"

    # # È˜terge fiÈ™ierele dupÄƒ descÄƒrcare
    # def cleanup():
    #     for file in OUTPUT_FOLDER.glob("*.xlsx"):
    #         file.unlink(missing_ok=True)
    #     for csv_file in UPLOAD_FOLDER.glob("*.csv"):
    #         csv_file.unlink(missing_ok=True)
    #     archive_path.unlink(missing_ok=True)

    # background_tasks.add_task(cleanup)  # RuleazÄƒ cleanup Ã®n fundal
    # return response


@app.get("/log", response_class=HTMLResponse)
def get_log():
    """ReturneazÄƒ conÈ›inutul fiÈ™ierului log pentru afiÈ™are Ã®n UI."""
    if LOG_FILE.exists():
        with LOG_FILE.open("r", encoding="utf-8") as f:
            log_content = f.read()
        return f"<div>{log_content}</div>"  # ReturnÄƒm log-ul formatat
    return "<pre><em>Nu existÄƒ erori Ã®n log.</em></pre>"


@app.get("/list_files/")
def list_files():
    """ReturneazÄƒ lista fiÈ™ierelor generate pentru descÄƒrcare."""
    files = list(OUTPUT_FOLDER.glob("*.xlsx"))
    if not files:
        return HTMLResponse("<p>Niciun fiÈ™ier generat Ã®ncÄƒ.</p>")
    file_links = "".join(f'<li><a href="/download/{file.name}" download>{file.name}</a></li>' for file in files)
    return HTMLResponse(f"<ul>{file_links}</ul>")

from fastapi.responses import HTMLResponse

@app.delete("/delete_files/")
def delete_files():
    """È˜terge toate fiÈ™ierele Ã®ncÄƒrcate È™i generate È™i returneazÄƒ un mesaj HTML formatat."""
    deleted_files = []

    # È˜terge fiÈ™ierele din folderul CSV (Ã®ncÄƒrcate)
    if UPLOAD_FOLDER.exists():
        for file in UPLOAD_FOLDER.glob("*"):
            try:
                file.unlink()
                deleted_files.append(file.name)
            except Exception as e:
                return HTMLResponse(content=f"<p><strong>Eroare:</strong> Nu s-a putut È™terge {file.name}: {e}</p>", status_code=500)

    # È˜terge fiÈ™ierele din folderul OUTPUT (generate)
    if OUTPUT_FOLDER.exists():
        for file in OUTPUT_FOLDER.glob("*.xlsx"):
            try:
                file.unlink()
                deleted_files.append(file.name)
            except Exception as e:
                return HTMLResponse(content=f"<p><strong>Eroare:</strong> Nu s-a putut È™terge {file.name}: {e}</p>", status_code=500)

    # Construim mesajul HTML
    if deleted_files:
        deleted_files_html = "<ul class='list-disc pl-5'>" + "".join(f"<li>{file}</li>" for file in deleted_files) + "</ul>"
        return HTMLResponse(content=f"<p>FiÈ™iere È™terse cu succes:</p>{deleted_files_html}")
    else:
        return HTMLResponse(content="<p><em>Nu au fost gÄƒsite fiÈ™iere de È™ters.</em></p>")
